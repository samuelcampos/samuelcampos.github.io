{"version":3,"sources":["Card/Card.jsx","DrawButton/DrawButton.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","onClick","bind","state","reversed","newReversed","this","setState","className","card","id","hebrew","style","display","hebrewPrefix","src","annotation","translit","name","meaning","type","Component","DrawButton","drawCard","randomCard","nextCard","previousCard","increment","ButtonGroup","aria-label","size","Button","variant","App","updateCard","getRandomCard","changeCardType","cards","CARDS","alfabeto","currentCardType","currentCard","currentIndex","newCardType","cardsList","newCard","undefined","index","randomIndex","Math","floor","random","length","newIndex","Container","Row","Col","Navbar","Nav","activeKey","onSelect","selectedKey","Item","Link","eventKey","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.bef70dfe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n    constructor(props){\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n\n        this.state = {\n            reversed: false\n        };\n    }\n\n    onClick(){\n        const newReversed = !this.state.reversed;\n\n        this.setState({\n            ...this.state,\n            reversed: newReversed\n        });\n    }\n\n    render(props){\n        return(\n            <div className=\"card-container\">\n                <div \n                    className={\"card \" + (this.state.reversed ? \"reversed\" : \"\")}\n                    onClick={this.onClick}\n                    >\n                    <div className=\"front\">\n                        <div className=\"id\">{this.props.card.id}</div>\n                        <div className=\"hebrew\">\n                            <span className=\"be\">{this.props.card.hebrew}</span>\n                            <img style={{display: !!this.props.card.hebrewPrefix ? 'inline' : 'none' }}\n                                src={'nikud/' + this.props.card.hebrewPrefix}/>\n                        </div>\n                        <div className=\"annotation\">{this.props.card.annotation}</div>\n                    </div>\n                    <div className=\"back\">\n                        <div className=\"translit\">Transliteração\n                            <br/>\n                            <span className=\"inner\">{this.props.card.translit}</span>\n                        </div>\n                        <div className=\"name\" style={{display: !!this.props.card.name ? 'block' : 'none' }}>\n                            Nome\n                            <br/>\n                            <span className=\"inner\">{this.props.card.name}</span>\n                        </div>\n                        <div className=\"meaning\" style={{display: !!this.props.card.meaning ? 'block' : 'none' }}>\n                            Significado\n                            <br/>\n                            <span className=\"inner\">{this.props.card.meaning}</span>\n                        </div>\n                        <div className=\"meaning\" style={{display: !!this.props.card.type ? 'block' : 'none' }}>\n                            Tipo\n                            <br/>\n                            <span className=\"inner\">{this.props.card.type}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card\n","import React, { Component } from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Button from 'react-bootstrap/Button';\nimport './DrawButton.css';\n\nclass DrawButton extends Component {\n    constructor(props){\n        super(props);\n\n        this.drawCard = this.drawCard.bind(this);\n        this.randomCard = this.randomCard.bind(this);\n        this.nextCard = this.nextCard.bind(this);\n        this.previousCard = this.previousCard.bind(this);\n    }\n\n    drawCard(increment){\n        this.props.drawCard(increment);\n    }\n\n\n    randomCard() {\n        this.drawCard();\n    }\n\n    previousCard() {\n        this.drawCard(-1);\n    }\n\n    nextCard() {\n        this.drawCard(1);\n    }\n\n    render(props){\n        return(\n            <div className=\"buttonContainer\">\n                <ButtonGroup aria-label=\"Basic example\" size=\"lg\">\n                    <Button onClick={this.previousCard} >&nbsp;&lt;&nbsp;</Button>\n                    <Button variant=\"secondary\" onClick={this.randomCard}>Aleatório</Button>\n                    <Button onClick={this.nextCard}>&nbsp;&gt;&nbsp;</Button>\n                </ButtonGroup>\n            </div>\n        )\n    }\n}\n\nexport default DrawButton","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Card from './Card/Card';\nimport DrawButton from './DrawButton/DrawButton';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport CARDS from './Data/cards.json';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.updateCard = this.updateCard.bind(this);\n    this.getRandomCard = this.getRandomCard.bind(this);\n    this.changeCardType = this.changeCardType.bind(this);\n\n    this.state = {\n      cards: CARDS.alfabeto,\n      currentCardType: 'alfabeto',\n      currentCard: null,\n      currentIndex: -1\n    };\n  }\n\n  changeCardType(newCardType) {\n    if (newCardType === this.state.currentCardType) {\n      return;\n    }\n\n    const cardsList = CARDS[newCardType];\n    const newCard = this.getRandomCard(undefined, cardsList);\n\n    this.setState({\n      cards: cardsList,\n      currentCardType: newCardType,\n      currentCard: newCard.card,\n      currentIndex: newCard.index\n    });\n  }\n\n  componentWillMount(){\n    this.updateCard();\n  }\n\n  getRandomCard(currentCard, cardsList){\n    var randomIndex = Math.floor(Math.random() * cardsList.length);\n    var card = cardsList[randomIndex];\n    \n    if(currentCard && card.id === currentCard.id){\n      return this.getRandomCard(currentCard, cardsList)\n    }\n\n    return {\n      card,\n      index: randomIndex\n    };\n  }\n\n  updateCard(increment){\n    const cardsList = this.state.cards;\n    let newCard;\n\n    if (!increment) {\n      newCard = this.getRandomCard(this.state.currentCard, cardsList);\n    } else {\n      let newIndex = (this.state.currentIndex + increment) % cardsList.length;\n\n      if (newIndex < 0) {\n        newIndex = cardsList.length + newIndex;\n      }\n      \n      newCard = {\n        card: cardsList[newIndex],\n        index: newIndex\n      };\n    }\n\n    this.setState({\n      ...this.state,\n      currentCard: newCard.card,\n      currentIndex: newCard.index\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Row>\n            <Col>\n              <Navbar className=\"justify-content-center\">\n                <Nav\n                    \n                    activeKey={this.state.currentCardType}\n                    onSelect={(selectedKey) => this.changeCardType(selectedKey)}\n                  >\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"alfabeto\">Alfabeto</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"vogais\">Vogais</Nav.Link>\n                  </Nav.Item>\n                  <Nav.Item>\n                    <Nav.Link eventKey=\"vocabulario\">Vocabulário</Nav.Link>\n                  </Nav.Item>\n                </Nav>\n              </Navbar>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"cardRow\">\n                <Card card={this.state.currentCard}/>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className=\"buttonRow\">\n                <DrawButton drawCard={this.updateCard}/>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}